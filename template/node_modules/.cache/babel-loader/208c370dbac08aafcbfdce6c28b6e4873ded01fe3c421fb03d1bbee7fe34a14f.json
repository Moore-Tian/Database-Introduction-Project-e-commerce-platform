{"ast":null,"code":"/**\n * 处理字段及空间\n * @param editField 字段的数据描述\n */\nexport const convertFieldWidget = editField => {\n  const widget = editField.widget;\n  let realWidget = convertWidget(widget);\n  //处理校验规则\n  realWidget.rules = validatorAdapter(editField || []);\n  return realWidget;\n};\n\n/**\n * 处理控件\n * @param widget 后台返回的控件数据描述\n */\nexport const convertWidget = widget => {\n  let widgetProcessorElement = widgetProcessor[widget.widgetName];\n  let realWidget;\n  //找到处理器进行控件处理，否则直接使用后台返回的组件属性\n  if (widgetProcessorElement) {\n    realWidget = widgetProcessorElement(widget);\n  } else {\n    realWidget = {\n      ...widget\n    };\n  }\n  return realWidget;\n};\nconst widgetProcessor = {\n  //选择控件\n  \"v-select\": widget => {\n    return {\n      ...widget,\n      key: widget.key,\n      label: widget.text,\n      items: widget.model,\n      \"x-samll\": true,\n      \"item-text\": \"label\",\n      \"item-value\": \"value\",\n      \"small-chips\": true,\n      multiple: widget.multiple,\n      dense: true,\n      widgetName: \"v-autocomplete\",\n      clearable: true\n    };\n  },\n  //input控件\n  \"v-text-field\": widget => {\n    return {\n      ...widget,\n      key: widget.key,\n      label: widget.text,\n      dense: true\n    };\n  },\n  \"v-region\": widget => {\n    return {\n      ...widget,\n      key: widget.key,\n      label: widget.text,\n      items: widget.model,\n      \"x-samll\": true,\n      \"item-text\": \"label\",\n      \"item-value\": \"value\",\n      \"small-chips\": true,\n      multiple: widget.multiple,\n      dense: true,\n      widgetName: \"v-autocomplete\",\n      clearable: true\n    };\n  },\n  //文办控件\n  \"v-textarea\": widget => {\n    return {\n      ...widget,\n      key: widget.key,\n      label: widget.text,\n      dense: true,\n      rows: 1\n    };\n  },\n  //树形选择控件\n  \"tree-select\": widget => {\n    return {\n      ...widget,\n      dense: true,\n      model: \"\",\n      label: widget.text,\n      treeItem: widget.model\n    };\n  },\n  \"date-picker\": widget => {\n    return {\n      ...widget,\n      label: widget.text,\n      dense: true\n    };\n  }\n};\n\n//校验器适配器，用于处理字段的校验\nexport const validatorAdapter = editField => {\n  const validators = {\n    //必填项\n    required: required(editField.text),\n    trigger: 'blur'\n  };\n  return editField.rules.map(ruleName => validators[ruleName]);\n};\nexport const required = function (name) {\n  return function (v) {\n    return v !== undefined && v !== null && v !== \"\" || `${name}不能为空`;\n  };\n};","map":{"version":3,"names":["convertFieldWidget","editField","widget","realWidget","convertWidget","rules","validatorAdapter","widgetProcessorElement","widgetProcessor","widgetName","key","label","text","items","model","multiple","dense","clearable","rows","treeItem","validators","required","trigger","map","ruleName","name","v","undefined"],"sources":["C:/Users/lenovo/Desktop/File/数据库引论/pj/template/src/utils/widget.js"],"sourcesContent":["/**\n * 处理字段及空间\n * @param editField 字段的数据描述\n */\nexport const convertFieldWidget = (editField) => {\n  const widget = editField.widget;\n  let realWidget = convertWidget(widget);\n  //处理校验规则\n  realWidget.rules = validatorAdapter(editField || []);\n  return realWidget;\n};\n\n/**\n * 处理控件\n * @param widget 后台返回的控件数据描述\n */\nexport const convertWidget = (widget) => {\n  let widgetProcessorElement = widgetProcessor[widget.widgetName];\n  let realWidget;\n  //找到处理器进行控件处理，否则直接使用后台返回的组件属性\n  if (widgetProcessorElement) {\n    realWidget = widgetProcessorElement(widget);\n  } else {\n    realWidget = { ...widget };\n  }\n  return realWidget;\n};\n\nconst widgetProcessor = {\n  //选择控件\n  \"v-select\": (widget) => {\n    return {\n      ...widget,\n      key: widget.key,\n      label: widget.text,\n      items: widget.model,\n      \"x-samll\": true,\n      \"item-text\": \"label\",\n      \"item-value\": \"value\",\n      \"small-chips\": true,\n      multiple: widget.multiple,\n      dense: true,\n      widgetName: \"v-autocomplete\",\n      clearable: true,\n    };\n  },\n  //input控件\n  \"v-text-field\": (widget) => {\n    return {\n      ...widget,\n      key: widget.key,\n      label: widget.text,\n      dense: true,\n    };\n  },\n  \"v-region\": (widget) => {\n    return {\n      ...widget,\n      key: widget.key,\n      label: widget.text,\n      items: widget.model,\n      \"x-samll\": true,\n      \"item-text\": \"label\",\n      \"item-value\": \"value\",\n      \"small-chips\": true,\n      multiple: widget.multiple,\n      dense: true,\n      widgetName: \"v-autocomplete\",\n      clearable: true,\n    };\n  },\n  //文办控件\n  \"v-textarea\": (widget) => {\n    return {\n      ...widget,\n      key: widget.key,\n      label: widget.text,\n      dense: true,\n      rows: 1,\n    };\n  },\n  //树形选择控件\n  \"tree-select\": (widget) => {\n    return {\n      ...widget,\n      dense: true,\n      model: \"\",\n      label: widget.text,\n      treeItem: widget.model,\n    };\n  },\n  \"date-picker\": (widget) => {\n    return {\n      ...widget,\n      label:widget.text,   \n      dense: true,\n    };\n  },\n};\n\n//校验器适配器，用于处理字段的校验\nexport const validatorAdapter = (editField) => {\n  const validators = {\n    //必填项\n    required: required(editField.text),\n    trigger:'blur'\n\n  };\n\n  return editField.rules.map((ruleName) => validators[ruleName]);\n};\n\nexport const required = function(name) {\n  return function(v) {\n    return (v !== undefined && v !== null && v !== \"\") || `${name}不能为空`;\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}