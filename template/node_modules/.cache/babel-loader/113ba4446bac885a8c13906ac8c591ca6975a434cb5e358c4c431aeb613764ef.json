{"ast":null,"code":"// 导出页面为PDF格式\n/* eslint-disable */\n//不使用JQuery版的\nimport html2canvas from 'html2canvas';\nimport JsPDF from 'jspdf';\n\n/**\r\n * @param  ele          要生成 pdf 的DOM元素（容器）\r\n * @param  padfName     PDF文件生成后的文件名字\r\n * */\n\nfunction downloadPDF(ele, pdfName) {\n  let eleW = ele.offsetWidth; // 获得该容器的宽\n  let eleH = ele.offsetHeight; // 获得该容器的高\n  let eleOffsetTop = ele.offsetTop; // 获得该容器到文档顶部的距离\n  let eleOffsetLeft = ele.offsetLeft; // 获得该容器到文档最左的距离\n\n  var canvas = document.createElement('canvas');\n  var abs = 0;\n  let win_in = document.documentElement.clientWidth || document.body.clientWidth; // 获得当前可视窗口的宽度（不包含滚动条）\n  let win_out = window.innerWidth; // 获得当前窗口的宽度（包含滚动条）\n\n  if (win_out > win_in) {\n    // abs = (win_o - win_i)/2;    // 获得滚动条长度的一半\n    abs = (win_out - win_in) / 2; // 获得滚动条宽度的一半\n    // console.log(a, '新abs');\n  }\n\n  canvas.width = eleW * 2; // 将画布宽&&高放大两倍\n  canvas.height = eleH * 2;\n  var context = canvas.getContext('2d');\n  context.scale(2, 2);\n  context.translate(-eleOffsetLeft - abs, -eleOffsetTop);\n  // 这里默认横向没有滚动条的情况，因为offset.left(),有无滚动条的时候存在差值，因此\n  // translate的时候，要把这个差值去掉\n\n  // html2canvas(element).then( (canvas)=>{ //报错\n  // html2canvas(element[0]).then( (canvas)=>{\n  html2canvas(ele, {\n    dpi: 300,\n    // allowTaint: true,  //允许 canvas 污染， allowTaint参数要去掉，否则是无法通过toDataURL导出canvas数据的\n    useCORS: true //允许canvas画布内 可以跨域请求外部链接图片, 允许跨域请求。\n  }).then(canvas => {\n    var contentWidth = canvas.width;\n    var contentHeight = canvas.height;\n    //一页pdf显示html页面生成的canvas高度;\n    var pageHeight = contentWidth / 592.28 * 841.89;\n    //未生成pdf的html页面高度\n    var leftHeight = contentHeight;\n    //页面偏移\n    var position = 0;\n    //a4纸的尺寸[595.28,841.89]，html页面生成的canvas在pdf中图片的宽高\n    var imgWidth = 595.28;\n    var imgHeight = 595.28 / contentWidth * contentHeight;\n    var pageData = canvas.toDataURL('image/jpeg', 1.0);\n    var pdf = new JsPDF('', 'pt', 'a4');\n    //有两个高度需要区分，一个是html页面的实际高度，和生成pdf的页面高度(841.89)\n    //当内容未超过pdf一页显示的范围，无需分页\n    if (leftHeight < pageHeight) {\n      //在pdf.addImage(pageData, 'JPEG', 左，上，宽度，高度)设置在pdf中显示；\n      pdf.addImage(pageData, 'JPEG', 0, 0, imgWidth, imgHeight);\n      // pdf.addImage(pageData, 'JPEG', 20, 40, imgWidth, imgHeight);\n    } else {\n      // 分页\n      while (leftHeight > 0) {\n        pdf.addImage(pageData, 'JPEG', 0, position, imgWidth, imgHeight);\n        leftHeight -= pageHeight;\n        position -= 841.89;\n        //避免添加空白页\n        if (leftHeight > 0) {\n          pdf.addPage();\n        }\n      }\n    }\n    //可动态生成\n    pdf.save(pdfName);\n  });\n}\nexport default {\n  downloadPDF\n};","map":{"version":3,"names":["html2canvas","JsPDF","downloadPDF","ele","pdfName","eleW","offsetWidth","eleH","offsetHeight","eleOffsetTop","offsetTop","eleOffsetLeft","offsetLeft","canvas","document","createElement","abs","win_in","documentElement","clientWidth","body","win_out","window","innerWidth","width","height","context","getContext","scale","translate","dpi","useCORS","then","contentWidth","contentHeight","pageHeight","leftHeight","position","imgWidth","imgHeight","pageData","toDataURL","pdf","addImage","addPage","save"],"sources":["C:/Users/lenovo/Desktop/File/数据库引论/pj/template/src/components/business/echartstopdf.js"],"sourcesContent":["// 导出页面为PDF格式\r\n/* eslint-disable */\r\n//不使用JQuery版的\r\nimport html2canvas from 'html2canvas'\r\nimport JsPDF from 'jspdf'\r\n\r\n/**\r\n * @param  ele          要生成 pdf 的DOM元素（容器）\r\n * @param  padfName     PDF文件生成后的文件名字\r\n * */\r\n\r\nfunction downloadPDF(ele, pdfName) {\r\n\r\n  let eleW = ele.offsetWidth// 获得该容器的宽\r\n  let eleH = ele.offsetHeight// 获得该容器的高\r\n  let eleOffsetTop = ele.offsetTop  // 获得该容器到文档顶部的距离\r\n  let eleOffsetLeft = ele.offsetLeft // 获得该容器到文档最左的距离\r\n\r\n  var canvas = document.createElement('canvas')\r\n  var abs = 0\r\n\r\n  let win_in = document.documentElement.clientWidth || document.body.clientWidth // 获得当前可视窗口的宽度（不包含滚动条）\r\n  let win_out = window.innerWidth // 获得当前窗口的宽度（包含滚动条）\r\n\r\n  if (win_out > win_in) {\r\n    // abs = (win_o - win_i)/2;    // 获得滚动条长度的一半\r\n    abs = (win_out - win_in) / 2    // 获得滚动条宽度的一半\r\n    // console.log(a, '新abs');\r\n  }\r\n  canvas.width = eleW * 2    // 将画布宽&&高放大两倍\r\n  canvas.height = eleH * 2\r\n\r\n  var context = canvas.getContext('2d')\r\n  context.scale(2, 2)\r\n  context.translate(-eleOffsetLeft - abs, -eleOffsetTop)\r\n  // 这里默认横向没有滚动条的情况，因为offset.left(),有无滚动条的时候存在差值，因此\r\n  // translate的时候，要把这个差值去掉\r\n\r\n  // html2canvas(element).then( (canvas)=>{ //报错\r\n  // html2canvas(element[0]).then( (canvas)=>{\r\n  html2canvas(ele, {\r\n    dpi: 300,\r\n    // allowTaint: true,  //允许 canvas 污染， allowTaint参数要去掉，否则是无法通过toDataURL导出canvas数据的\r\n    useCORS: true  //允许canvas画布内 可以跨域请求外部链接图片, 允许跨域请求。\r\n  }).then((canvas) => {\r\n    var contentWidth = canvas.width\r\n    var contentHeight = canvas.height\r\n    //一页pdf显示html页面生成的canvas高度;\r\n    var pageHeight = contentWidth / 592.28 * 841.89\r\n    //未生成pdf的html页面高度\r\n    var leftHeight = contentHeight\r\n    //页面偏移\r\n    var position = 0\r\n    //a4纸的尺寸[595.28,841.89]，html页面生成的canvas在pdf中图片的宽高\r\n    var imgWidth = 595.28\r\n    var imgHeight = 595.28 / contentWidth * contentHeight\r\n    var pageData = canvas.toDataURL('image/jpeg', 1.0)\r\n    var pdf = new JsPDF('', 'pt', 'a4')\r\n    //有两个高度需要区分，一个是html页面的实际高度，和生成pdf的页面高度(841.89)\r\n    //当内容未超过pdf一页显示的范围，无需分页\r\n    if (leftHeight < pageHeight) {\r\n      //在pdf.addImage(pageData, 'JPEG', 左，上，宽度，高度)设置在pdf中显示；\r\n      pdf.addImage(pageData, 'JPEG', 0, 0, imgWidth, imgHeight)\r\n      // pdf.addImage(pageData, 'JPEG', 20, 40, imgWidth, imgHeight);\r\n    } else {    // 分页\r\n      while (leftHeight > 0) {\r\n        pdf.addImage(pageData, 'JPEG', 0, position, imgWidth, imgHeight)\r\n        leftHeight -= pageHeight\r\n        position -= 841.89\r\n        //避免添加空白页\r\n        if (leftHeight > 0) {\r\n          pdf.addPage()\r\n        }\r\n      }\r\n    }\r\n    //可动态生成\r\n    pdf.save(pdfName)\r\n  })\r\n}\r\n\r\nexport default {\r\n  downloadPDF\r\n}"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,WAAW,MAAM,aAAa;AACrC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;;AAEA,SAASC,WAAW,CAACC,GAAG,EAAEC,OAAO,EAAE;EAEjC,IAAIC,IAAI,GAAGF,GAAG,CAACG,WAAW;EAC1B,IAAIC,IAAI,GAAGJ,GAAG,CAACK,YAAY;EAC3B,IAAIC,YAAY,GAAGN,GAAG,CAACO,SAAS,EAAE;EAClC,IAAIC,aAAa,GAAGR,GAAG,CAACS,UAAU,EAAC;;EAEnC,IAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC7C,IAAIC,GAAG,GAAG,CAAC;EAEX,IAAIC,MAAM,GAAGH,QAAQ,CAACI,eAAe,CAACC,WAAW,IAAIL,QAAQ,CAACM,IAAI,CAACD,WAAW,EAAC;EAC/E,IAAIE,OAAO,GAAGC,MAAM,CAACC,UAAU,EAAC;;EAEhC,IAAIF,OAAO,GAAGJ,MAAM,EAAE;IACpB;IACAD,GAAG,GAAG,CAACK,OAAO,GAAGJ,MAAM,IAAI,CAAC,EAAI;IAChC;EACF;;EACAJ,MAAM,CAACW,KAAK,GAAGnB,IAAI,GAAG,CAAC,EAAI;EAC3BQ,MAAM,CAACY,MAAM,GAAGlB,IAAI,GAAG,CAAC;EAExB,IAAImB,OAAO,GAAGb,MAAM,CAACc,UAAU,CAAC,IAAI,CAAC;EACrCD,OAAO,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACnBF,OAAO,CAACG,SAAS,CAAC,CAAClB,aAAa,GAAGK,GAAG,EAAE,CAACP,YAAY,CAAC;EACtD;EACA;;EAEA;EACA;EACAT,WAAW,CAACG,GAAG,EAAE;IACf2B,GAAG,EAAE,GAAG;IACR;IACAC,OAAO,EAAE,IAAI,CAAE;EACjB,CAAC,CAAC,CAACC,IAAI,CAAEnB,MAAM,IAAK;IAClB,IAAIoB,YAAY,GAAGpB,MAAM,CAACW,KAAK;IAC/B,IAAIU,aAAa,GAAGrB,MAAM,CAACY,MAAM;IACjC;IACA,IAAIU,UAAU,GAAGF,YAAY,GAAG,MAAM,GAAG,MAAM;IAC/C;IACA,IAAIG,UAAU,GAAGF,aAAa;IAC9B;IACA,IAAIG,QAAQ,GAAG,CAAC;IAChB;IACA,IAAIC,QAAQ,GAAG,MAAM;IACrB,IAAIC,SAAS,GAAG,MAAM,GAAGN,YAAY,GAAGC,aAAa;IACrD,IAAIM,QAAQ,GAAG3B,MAAM,CAAC4B,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC;IAClD,IAAIC,GAAG,GAAG,IAAIzC,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC;IACnC;IACA;IACA,IAAImC,UAAU,GAAGD,UAAU,EAAE;MAC3B;MACAO,GAAG,CAACC,QAAQ,CAACH,QAAQ,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAEF,QAAQ,EAAEC,SAAS,CAAC;MACzD;IACF,CAAC,MAAM;MAAK;MACV,OAAOH,UAAU,GAAG,CAAC,EAAE;QACrBM,GAAG,CAACC,QAAQ,CAACH,QAAQ,EAAE,MAAM,EAAE,CAAC,EAAEH,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,CAAC;QAChEH,UAAU,IAAID,UAAU;QACxBE,QAAQ,IAAI,MAAM;QAClB;QACA,IAAID,UAAU,GAAG,CAAC,EAAE;UAClBM,GAAG,CAACE,OAAO,EAAE;QACf;MACF;IACF;IACA;IACAF,GAAG,CAACG,IAAI,CAACzC,OAAO,CAAC;EACnB,CAAC,CAAC;AACJ;AAEA,eAAe;EACbF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}